#
# Copyright (C) 2022 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# See YaML.md for syntax definition
#
--- #--------------------------------------------------------------------------
type: header
desc: "Intel $OneApi Unified Runtime APIs for Platform"
ordinal: "1"
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves all available platforms"
class: $xPlatform
name: Get
decl: static
ordinal: "0"
analogue:
    - "**clGetPlatformIDs**"
details:
    - "Multiple calls to this function will return identical platforms handles, in the same order."
    - "The application may call this function from simultaneous threads, the implementation must be thread-safe"
params:
    - type: "uint32_t"
      name: NumEntries
      desc: |
            [in] the number of platforms to be added to phPlatforms. 
            If phPlatforms is not NULL, then NumEntries should be greater than zero, otherwise $X_RESULT_ERROR_INVALID_SIZE,
            will be returned.
    - type: "$x_platform_handle_t*"
      name: phPlatforms
      desc: |
            [out][optional][range(0, NumEntries)] array of handle of platforms.
            If NumEntries is less than the number of platforms available, then $xPlatformGet shall only retrieve that number of platforms.
    - type: "uint32_t*"
      name: "pNumPlatforms"
      desc: |
            [out][optional] returns the total number of platforms available. 
returns:
    - $X_RESULT_ERROR_INVALID_SIZE
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported platform info"
class: $xPlatform
name: $x_platform_info_t
typed_etors: True
etors:
    - name: NAME
      value: "1"
      desc: "[char[]] The string denoting name of the platform. The size of the info needs to be dynamically queried."
    - name: VENDOR_NAME
      value: "2"
      desc: "[char[]] The string denoting name of the vendor of the platform. The size of the info needs to be dynamically queried."
    - name: VERSION
      value: "3"
      desc: "[char[]] The string denoting the version of the platform. The size of the info needs to be dynamically queried."
    - name: EXTENSIONS
      value: "4"
      desc: "[char[]] The string denoting extensions supported by the platform. The size of the info needs to be dynamically queried."
      todo: "document extensions names and their meaning"
    - name: PROFILE
      value: "5"
      desc: "[char[]] The string denoting profile of the platform. The size of the info needs to be dynamically queried."
      todo: "currently always return FULL_PROFILE, deprecate?"
    - name: BACKEND
      value: "6"
      desc: "[$x_platform_backend_t] The backend of the platform. Identifies the native backend adapter implementing this platform."

--- #--------------------------------------------------------------------------
type: function
desc: "Retrieves various information about platform"
class: $xPlatform
name: GetInfo
decl: static
ordinal: "0"
analogue:
    - "**clGetPlatformInfo**"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_platform_handle_t
      name: hPlatform
      desc: "[in] handle of the platform"
    - type: $x_platform_info_t
      name: propName
      desc: "[in] type of the info to retrieve"
    - type: "size_t"
      name: propSize
      desc: |
            [in] the number of bytes pointed to by pPlatformInfo.
    - type: "void*"
      name: pPropValue
      desc: |
            [out][optional][typename(propName, propSize)] array of bytes holding the info.
            If Size is not equal to or greater to the real number of bytes needed to return the info then the $X_RESULT_ERROR_INVALID_SIZE error is returned and pPlatformInfo is not used.
    - type: "size_t*"
      name: pSizeRet
      desc: |
            [out][optional] pointer to the actual number of bytes being queried by pPlatformInfo.
--- #--------------------------------------------------------------------------
type: enum
desc: "Supported API versions"
class: $xPlatform
name: $x_api_version_t
details:
    - "API versions contain major and minor attributes, use $X_MAJOR_VERSION and $X_MINOR_VERSION"
etors:
    - name: "0_6"
      value: "$X_MAKE_VERSION( 0, 6 )"
      desc: "version 0.6"
--- #--------------------------------------------------------------------------
type: function
desc: "Returns the API version supported by the specified platform"
class: $xPlatform
name: GetApiVersion
ordinal: "1"
details:
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_platform_handle_t
      name: hDriver
      desc: "[in] handle of the platform"
    - type: "$x_api_version_t*"
      name: pVersion
      desc: "[out] api version"
--- #--------------------------------------------------------------------------
type: function
desc: "Return platform native platform handle."
class: $xPlatform
name: GetNativeHandle
decl: static
ordinal: "0"
details:
    - "Retrieved native handle can be used for direct interaction with the native platform driver."
    - "Use interoperability platform extensions to convert native handle to native type."
    - "The application may call this function from simultaneous threads for the same context."
    - "The implementation of this function should be thread-safe."
params:
    - type: "$x_platform_handle_t"
      name: hPlatform
      desc: |
            [in] handle of the platform.
    - type: $x_native_handle_t*
      name: phNativePlatform
      desc: |
            [out] a pointer to the native handle of the platform.
--- #--------------------------------------------------------------------------
type: function
desc: "Create runtime platform object from native platform handle."
class: $xPlatform
name: CreateWithNativeHandle
decl: static
ordinal: "0"
details:
    - "Creates runtime platform handle from native driver platform handle."
    - "The application may call this function from simultaneous threads for the same context."
    - "The implementation of this function should be thread-safe."
params:
    - type: $x_native_handle_t
      name: hNativePlatform
      desc: |
            [in] the native handle of the platform.
    - type: "$x_platform_handle_t*"
      name: phPlatform
      desc: |
            [out] pointer to the handle of the platform object created.
--- #--------------------------------------------------------------------------
type: function
desc: "Get the platform specific compiler backend option from a generic frontend option."
class: $xPlatform
name: GetBackendOption
decl: static
details:
    - "The string returned via the ppPlatformOption is a NULL terminated C style string."
    - "The string returned via the ppPlatformOption is thread local."
    - "The memory in the string returned via the ppPlatformOption is owned by the adapter."
    - "The application may call this function from simultaneous threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_platform_handle_t
      name: hPlatform
      desc: "[in] handle of the platform instance."
    - type: const char*
      name: pFrontendOption
      desc: "[in] string containing the frontend option."
    - type: const char**
      name: ppPlatformOption
      desc: "[out] returns the correct platform specific compiler option based on the frontend option."
returns:
    - $X_RESULT_ERROR_INVALID_VALUE:
      - "If `pFrontendOption` is not a valid frontend option."
--- #--------------------------------------------------------------------------
type: function
desc: "Retrieve string representation of the underlying adapter specific result
       reported by the the last API that returned UR_RESULT_ADAPTER_SPECIFIC.
       Allows for an adapter independent way to return an adapter
       specific result."
class: $x
name: GetLastResult
decl: static
ordinal: "0"
details:
    - "The string returned via the ppMessage is a NULL terminated C style string."
    - "The string returned via the ppMessage is thread local."
    - "The entry point will return UR_RESULT_SUCCESS if the result being
       reported is to be considered a warning. Any other result code returned
       indicates that the adapter specific result is an error."
    -  "The memory in the string returned via the ppMessage is owned by the
       adapter."
    - "The application may call this function from simultaneous
       threads."
    - "The implementation of this function should be lock-free."
params:
    - type: $x_platform_handle_t
      name: hPlatform
      desc: "[in] handle of the platform instance"
    - type: const char**
      name: ppMessage
      desc: "[out] pointer to a string containing adapter specific result
             in string representation."
--- #--------------------------------------------------------------------------
type: enum
desc: "Identifies native backend adapters"
class: $xPlatform
name: $x_platform_backend_t
etors:
    - name: UNKNOWN
      value: "0"
      desc: "The backend is not a recognized one"
    - name: LEVEL_ZERO
      value: "1"
      desc: "The backend is Level Zero"
    - name: OPENCL
      value: "2"
      desc: "The backend is OpenCL"
    - name: CUDA
      value: "3"
      desc: "The backend is CUDA"
    - name: HIP
      value: "4"
      desc: "The backend is HIP"
